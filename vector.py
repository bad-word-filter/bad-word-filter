# =================================================================================================================================================
# 모듈 사용 방법 
# convert(입력) 

# 출력 
# 파일 안에 있는 단어와 유사함 ('0', **) 
# 파일 안에 있는 단어와 유사하지 않음 ('1', 입력 그대로 출력) 

# 문장/ 단어 입력 -> 코사인 유사도로 1차 판정 (소리와 표기가 일정 수준 유사하면 필터링) -> 코사인 유사도로 필터 안 되는 우회 단어를 다음 모듈로 필터링
# '1'이면 다음 모듈 입력으로
# '0'이면 필터되었으므로 종료
# =================================================================================================================================================
def switch(value):
    return {
        'ㄲ':[1   ,0.5 ,0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㄱ':[0.5 ,1   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㅋ':[0.3 ,0.5 ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        
        'ㅆ':[0   ,0   ,0   ,1   ,0.5 ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅅ':[0   ,0   ,0   ,0.5 ,1   ,0.8 ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        '^' :[0   ,0   ,0   ,0   ,0.8 ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㄸ':[0   ,0   ,0   ,0   ,0   ,0   ,1   ,0.5 ,0.3 ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㄷ':[0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0.5 ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㅌ':[0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0.5 ,1   ,0   ,0.3 ,0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅉ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0.3 ,1   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅈ':[0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,0.5 ,0   ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㅊ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0.5 ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        
        'ㅃ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,1   ,0.5 ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅂ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0.5 ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㅍ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,1   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0],
        
        'ㄹ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,1   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㄴ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅁ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0.3 ,0   ,0.5 ,1   ,0.5 ,0   ,0   ,0   ,0   ,0],
        'ㅇ':[0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0   ,0   ,0   ,0   ,0],
        '0' :[0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.8 ,1   ,0   ,0   ,0   ,0], 
        'o' :[0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.8 ,0   ,1   ,0   ,0   ,0], 
        'O' :[0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.8 ,0   ,0   ,1   ,0   ,0], 
        '@' :[0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.8 ,0   ,0   ,0   ,1   ,0],
        'ㅎ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.8 ,0   ,0   ,0   ,0   ,1],
        
        
        'ㅛ':[1   ,0.5 ,0   ,0.5 ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㅠ':[0.5 ,1   ,0.5 ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅜ':[0   ,0.5 ,1   ,0.3 ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0],
        'ㅗ':[0.5 ,0.3 ,0.3 ,1   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅡ':[0.3 ,0.3 ,0.5 ,0.5 ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        
        'ㅟ':[0   ,0   ,0.3 ,0   ,0   ,1   ,0.5 ,0.5 ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0],
        'ㅢ':[0   ,0   ,0   ,0   ,0.5 ,0.5 ,1   ,0.5 ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0.3 ,0.3 ,0.3],
        'ㅣ':[0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        '1' :[0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,0.8 ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'i' :[0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,0.8 ,0   ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'l' :[0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,0.8 ,0   ,0   ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],  
        '!' :[0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,0.8 ,0   ,0   ,0   ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅚ':[0   ,0   ,0   ,0.3 ,0   ,0.5 ,0.5 ,0.5 ,0   ,0   ,0   ,0   ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㅔ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,1   ,0.5 ,0.5 ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅖ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0.5 ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㅐ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,1   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅒ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,0.5 ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        
        'ㅑ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,1   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅏ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0], 
        'r' :[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅓ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,1   ,0.5 ,0   ,0   ,0   ,0],
        'ㅕ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0   ,0   ,0   ,0],

        'ㅘ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,1   ,0.5 ,0   ,0],
        'ㅙ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0   ,0],
        'ㅝ':[0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,1   ,0.5],
        'ㅞ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1],
    }.get(value, [0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0 ,0])

# ==================================================================================================================================================
from jamo import h2j, j2hcj

def seperate(word):
    seperated_word = j2hcj(h2j(word))
    separated = []
    for a in seperated_word:
        separated.append(a)
    return separated

# ==================================================================================================================================================
import numpy as np
from numpy import dot
from numpy.linalg import norm

def embed(word):
    separated = seperate(word)
    vector = []
    for char in separated:
        vector = vector + switch(char)
    return np.array(vector)

def calculate_cosine_similarity(vector1, vector2):
    if len(vector1) != len(vector2):
        return 0
    return dot(vector1, vector2) / (norm(vector1) * norm(vector2))

# ==================================================================================================================================================
def calculate_word_similarity(word1, word2):
    vector1 = embed(word1)
    vector2 = embed(word2)
    return calculate_cosine_similarity(vector1, vector2)
    
# ==================================================================================================================================================
def convert(input):
    corpus = pd.read_csv('비속어 CSV 경로명')
    corpus = corpus['badwords'].values

    max_similarity = 0
    for word in corpus:
        similarity = calculate_word_similarity(input, word.strip())
        if max_similarity < similarity :
            max_similarity = similarity 

    print(max_similarity)

    if max_similarity > 0.8:
        return ('0', '*' * len(input))
    else:
        return ('1', input)
